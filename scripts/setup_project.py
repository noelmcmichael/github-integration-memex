#!/usr/bin/env python3
"""
Project Setup Script

This script sets up a new web application project with consistent environment
configuration and Docker setup.
"""

import os
import sys
import shutil
import subprocess
from pathlib import Path
from typing import Dict, List
import argparse


class ProjectSetup:
    """Sets up a new web application project with standardized configuration."""
    
    def __init__(self, project_name: str, project_type: str, target_dir: str = None):
        self.project_name = project_name
        self.project_type = project_type
        self.target_dir = Path(target_dir) if target_dir else Path.cwd() / project_name
        self.template_dir = Path(__file__).parent.parent / "templates" / "docker" / f"web-app-{project_type}"
        
    def create_project_structure(self):
        """Create the basic project directory structure."""
        print(f"üìÅ Creating project structure for {self.project_name}...")
        
        # Create main directory
        self.target_dir.mkdir(parents=True, exist_ok=True)
        
        # Create standard directories
        directories = [
            "src",
            "tests",
            "docs",
            "uploads",
            "logs",
            "static",
            "templates",
            ".github/workflows"
        ]
        
        for directory in directories:
            (self.target_dir / directory).mkdir(parents=True, exist_ok=True)
        
        print(f"‚úÖ Created project structure in {self.target_dir}")
    
    def copy_docker_templates(self):
        """Copy Docker configuration templates."""
        print("üê≥ Setting up Docker configuration...")
        
        if not self.template_dir.exists():
            print(f"‚ùå Template directory not found: {self.template_dir}")
            return False
        
        # Copy Docker files
        docker_files = [
            "Dockerfile",
            "docker-compose.yml",
            ".env.template"
        ]
        
        for file in docker_files:
            src = self.template_dir / file
            dst = self.target_dir / file
            
            if src.exists():
                shutil.copy2(src, dst)
                print(f"   ‚úÖ Copied {file}")
            else:
                print(f"   ‚ö† Template file not found: {file}")
        
        # Copy additional files for Python projects
        if self.project_type == "python":
            additional_files = ["requirements.txt", "init.sql"]
            for file in additional_files:
                src = self.template_dir / file
                dst = self.target_dir / file
                
                if src.exists():
                    shutil.copy2(src, dst)
                    print(f"   ‚úÖ Copied {file}")
        
        return True
    
    def create_env_file(self):
        """Create .env file from template."""
        print("üîß Creating environment configuration...")
        
        env_template = self.target_dir / ".env.template"
        env_file = self.target_dir / ".env"
        
        if env_template.exists():
            shutil.copy2(env_template, env_file)
            print("   ‚úÖ Created .env file from template")
            print("   ‚ö† Please update .env with your actual values")
        else:
            print("   ‚ùå .env.template not found")
    
    def create_gitignore(self):
        """Create .gitignore file."""
        print("üìã Creating .gitignore...")
        
        gitignore_content = """
# Environment files
.env
.env.local
.env.*.local

# Dependencies
node_modules/
__pycache__/
*.pyc
*.pyo
*.pyd
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage/

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
jspm_packages/

# TypeScript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# next.js build output
.next

# nuxt.js build output
.nuxt

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# Uploads
uploads/

# Database
*.db
*.sqlite3

# Docker
.dockerignore
"""
        
        gitignore_file = self.target_dir / ".gitignore"
        gitignore_file.write_text(gitignore_content.strip())
        print("   ‚úÖ Created .gitignore")
    
    def create_readme(self):
        """Create README.md file."""
        print("üìù Creating README.md...")
        
        readme_content = f"""# {self.project_name}

A web application built with {self.project_type.title()}.

## Quick Start

### Prerequisites
- Docker and Docker Compose
- Git

### Development Setup

1. **Clone the repository**
   ```bash
   git clone <repository-url>
   cd {self.project_name}
   ```

2. **Configure environment**
   ```bash
   cp .env.template .env
   # Edit .env with your actual values
   ```

3. **Start the development environment**
   ```bash
   docker-compose up -d
   ```

4. **Verify the setup**
   ```bash
   python scripts/validate_environment.py
   ```

### Available Services

- **Web Application**: http://localhost:{'3000' if self.project_type == 'node' else '8000'}
- **Database**: PostgreSQL on port 5432
- **Redis**: Redis on port 6379
- **Mail Server**: MailHog on http://localhost:8025

### Development Commands

```bash
# Start all services
docker-compose up -d

# View logs
docker-compose logs -f

# Stop all services
docker-compose down

# Run tests
docker-compose exec web {"npm test" if self.project_type == 'node' else "python -m pytest"}

# Access shell
docker-compose exec web {"bash" if self.project_type == 'node' else "python"}
```

### Project Structure

```
{self.project_name}/
‚îú‚îÄ‚îÄ src/                 # Source code
‚îú‚îÄ‚îÄ tests/              # Test files
‚îú‚îÄ‚îÄ docs/               # Documentation
‚îú‚îÄ‚îÄ uploads/            # File uploads
‚îú‚îÄ‚îÄ logs/              # Application logs
‚îú‚îÄ‚îÄ static/            # Static assets
‚îú‚îÄ‚îÄ templates/         # Template files
‚îú‚îÄ‚îÄ .github/workflows/ # GitHub Actions
‚îú‚îÄ‚îÄ Dockerfile         # Docker configuration
‚îú‚îÄ‚îÄ docker-compose.yml # Docker Compose configuration
‚îú‚îÄ‚îÄ .env.template      # Environment template
‚îú‚îÄ‚îÄ .env              # Environment variables (not in git)
‚îî‚îÄ‚îÄ README.md         # This file
```

## Deployment

### Environment Validation

Before deploying, always validate your environment:

```bash
python scripts/validate_environment.py
```

### Production Deployment

1. **Build production image**
   ```bash
   docker build -t {self.project_name}:latest .
   ```

2. **Deploy to GCP Cloud Run**
   ```bash
   # Configure gcloud
   gcloud config set project YOUR_PROJECT_ID
   
   # Build and deploy
   gcloud builds submit --tag gcr.io/YOUR_PROJECT_ID/{self.project_name}
   gcloud run deploy {self.project_name} --image gcr.io/YOUR_PROJECT_ID/{self.project_name} --platform managed
   ```

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Run tests
5. Submit a pull request

## License

This project is licensed under the MIT License.
"""
        
        readme_file = self.target_dir / "README.md"
        readme_file.write_text(readme_content)
        print("   ‚úÖ Created README.md")
    
    def create_github_workflow(self):
        """Create GitHub Actions workflow."""
        print("üöÄ Creating GitHub Actions workflow...")
        
        workflow_content = f"""name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up {"Node.js" if self.project_type == 'node' else "Python"}
      uses: {"actions/setup-node@v3" if self.project_type == 'node' else "actions/setup-python@v4"}
      with:
        {"node-version: '18'" if self.project_type == 'node' else "python-version: '3.11'"}
    
    - name: Install dependencies
      run: |
        {"npm ci" if self.project_type == 'node' else "pip install -r requirements.txt"}
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key
      run: |
        {"npm test" if self.project_type == 'node' else "python -m pytest"}
    
    - name: Run linting
      run: |
        {"npm run lint" if self.project_type == 'node' else "flake8 ."}
    
    - name: Validate environment
      run: |
        python scripts/validate_environment.py

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{{{ secrets.GCP_SA_KEY }}}}
        project_id: ${{{{ secrets.GCP_PROJECT_ID }}}}
    
    - name: Configure Docker
      run: gcloud auth configure-docker
    
    - name: Build and push Docker image
      run: |
        docker build -t gcr.io/${{{{ secrets.GCP_PROJECT_ID }}}}/{self.project_name}:${{{{ github.sha }}}} .
        docker push gcr.io/${{{{ secrets.GCP_PROJECT_ID }}}}/{self.project_name}:${{{{ github.sha }}}}
    
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy {self.project_name} \\
          --image gcr.io/${{{{ secrets.GCP_PROJECT_ID }}}}/{self.project_name}:${{{{ github.sha }}}} \\
          --platform managed \\
          --region us-central1 \\
          --allow-unauthenticated
"""
        
        workflow_file = self.target_dir / ".github" / "workflows" / "ci-cd.yml"
        workflow_file.write_text(workflow_content)
        print("   ‚úÖ Created GitHub Actions workflow")
    
    def initialize_git(self):
        """Initialize git repository."""
        print("üîÑ Initializing Git repository...")
        
        try:
            subprocess.run(
                ["git", "init"],
                cwd=self.target_dir,
                check=True,
                capture_output=True
            )
            
            subprocess.run(
                ["git", "add", "."],
                cwd=self.target_dir,
                check=True,
                capture_output=True
            )
            
            subprocess.run(
                ["git", "commit", "-m", "Initial commit: Project setup"],
                cwd=self.target_dir,
                check=True,
                capture_output=True
            )
            
            print("   ‚úÖ Git repository initialized")
            
        except subprocess.CalledProcessError as e:
            print(f"   ‚ö† Git initialization failed: {e}")
    
    def setup_project(self):
        """Run the complete project setup."""
        print(f"üöÄ Setting up {self.project_type} web application: {self.project_name}")
        print(f"üìç Target directory: {self.target_dir}")
        print()
        
        try:
            self.create_project_structure()
            self.copy_docker_templates()
            self.create_env_file()
            self.create_gitignore()
            self.create_readme()
            self.create_github_workflow()
            self.initialize_git()
            
            print(f"""
üéâ Project setup complete!

Next steps:
1. Edit .env file with your actual values
2. Run: cd {self.project_name}
3. Run: docker-compose up -d
4. Run: python scripts/validate_environment.py
5. Open http://localhost:{'3000' if self.project_type == 'node' else '8000'}

Happy coding! üöÄ
""")
            
        except Exception as e:
            print(f"‚ùå Setup failed: {e}")
            sys.exit(1)


def main():
    """Main function to run project setup."""
    parser = argparse.ArgumentParser(description='Set up a new web application project')
    parser.add_argument('name', help='Project name')
    parser.add_argument('--type', choices=['node', 'python'], default='python', 
                       help='Project type (default: python)')
    parser.add_argument('--dir', help='Target directory (default: current directory)')
    
    args = parser.parse_args()
    
    setup = ProjectSetup(args.name, args.type, args.dir)
    setup.setup_project()


if __name__ == "__main__":
    main()